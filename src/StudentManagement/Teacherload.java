/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package StudentManagement;

import co.jp.tihtih.homework.Contact;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Teacherload extends javax.swing.JFrame {

    /**
     * Creates new form Teacherload
     */
    public Teacherload() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("teachers管理");

        jLabel1.setText("お名前");

        jLabel2.setText("クラス");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("ＩＤ");

        jLabel4.setText("パスワード");

        jButton1.setText("PS更新");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("登録");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ＩＤ", "パスワード", "お名前", "性別", "クラス", "担当科目"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("学生管理");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "101", "102", "103", "104" }));

        jLabel5.setText("担当科目");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "数学", "英語", "国語", " " }));

        jLabel6.setText("性別");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "男性", "女性", " " }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jButton4.setText("All検索");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("削除");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("検索");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton5)
                                        .addGap(6, 6, 6))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel3))
                                            .addGap(37, 37, 37)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                                        .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(10, 10, 10)
                                .addComponent(jButton6)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3)))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton4))
                .addGap(30, 30, 30)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*
    登録
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        TeachersLoad tl = new TeachersLoad();
        List<TeachersLoad> tlo = new ArrayList<>();
        if (!jTextField3.getText().isEmpty()) {
            tl.setId(Integer.parseInt(jTextField3.getText()));
        } else {
            jLabel8.setText("Id入力していません");
        }
        tl.setPassword(jTextField3.getText());
        tl.setName(jTextField1.getText());
        tl.setSex((String) jComboBox3.getSelectedItem());
        tl.setKurasu((String) jComboBox1.getSelectedItem());
        tl.setSubject((String) jComboBox2.getSelectedItem());
        tlo.add(tl);
//        if (!tlo.isEmpty()) {
//            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
//
////            tableModel.setRowCount(0);
//            for (TeachersLoad tload : tlo) {
//                tableModel.addRow(new Object[]{tload.getId(), tload.getPassword(), tload.getName(), tload.getSex(), tload.getKurasu(), tload.getSubject()});
//            }
//        }
        Dbstudentinfo dbs = new Dbstudentinfo();
        int result;
        int res;
        int t;
        try {
            dbs.getDBcon();
//            id,class,科目が繰り返しだめ
            result = dbs.selectTload(tl.getId(), tl.getKurasu(), tl.getSubject());
            t = dbs.selectTload(tl.getKurasu(), tl.getSubject());
            if (result == 1 || t == 1) {
                jLabel8.setText("ユーザー重複");
            } else if (tl.getId() >= 10404 || tl.getId() < 10100) {
                jLabel8.setText("ID範囲外");
            } else {
                res = dbs.selectloginid(tl.getId());
                if (res != 1) {
                    dbs.addLoad(tl);
                }
                dbs.addTeacherinfo(tl);
                dbs.closeDBcon();
                jLabel8.setText("登録完了");
                if (!tlo.isEmpty()) {
                    DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
//            tableModel.setRowCount(0);
                    for (TeachersLoad tload : tlo) {
                        tableModel.addRow(new Object[]{tload.getId(), tload.getPassword(), tload.getName(), tload.getSex(), tload.getKurasu(), tload.getSubject()});
                    }
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Teacherload.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Teacherload.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        jTextField3.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        jTextField4.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
        jTextField1.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
//        jComboBox3.setSelectedItem((String) jTable1.getValueAt(jTable1.getSelectedRow(), 3));
//        jComboBox1.setSelectedItem((String) jTable1.getValueAt(jTable1.getSelectedRow(), 4));
//        jComboBox2.setSelectedItem((String) jTable1.getValueAt(jTable1.getSelectedRow(), 5));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    /*
    studnetmangageへ
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        Teacher t = new Teacher();
        this.dispose();
        t.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    /*
    削除
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        TeachersLoad tl = new TeachersLoad();
        tl.setId(Integer.parseInt(jTextField3.getText()));
        tl.setKurasu((String) jComboBox1.getSelectedItem());
        tl.setSubject((String) jComboBox2.getSelectedItem());
        tl.setName(jTextField1.getText());
        Dbstudentinfo db = new Dbstudentinfo();
        int result;
        try {
            db.getDBcon();
            result = db.selectTload(tl.getId(), tl.getKurasu(), tl.getSubject());
//            idで判断　delete
            if (tl.getId() != 0 && tl.getName().isEmpty()) {
                db.deleteTload(tl.getId());
                db.deletelogin(tl.getId());
                db.closeDBcon();
                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                tableModel.removeRow(jTable1.getSelectedRow());
                jLabel8.setText("削除しました");
            } else {
                jLabel8.setText("ユーザーが存在していません");
            }
            if (result == 1) {
                db.deleteTload(tl.getId(), tl.getKurasu(), tl.getSubject(), tl.getName());
//                db.deletelogin(tl.getId());
                db.closeDBcon();
                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                tableModel.removeRow(jTable1.getSelectedRow());
                jLabel8.setText("削除しました");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Teacherload.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Teacherload.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    /*
    teacherinfo 更新
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        TeachersLoad tl = new TeachersLoad();
        tl.setId(Integer.valueOf(jTextField3.getText()));
//        if (jTextField4.getText().matches("^[A-Za-z0-9]+$")) {
//            tl.setPassword(jTextField4.getText());
//        } else {
//            jLabel8.setText("半角入力してください");
//        }
        tl.setPassword(jTextField4.getText());
        tl.setName(jTextField1.getText());
        tl.setSex((String) jComboBox3.getSelectedItem());
        tl.setKurasu((String) jComboBox1.getSelectedItem());
        tl.setSubject((String) jComboBox2.getSelectedItem());
        List<TeachersLoad> tlo = new ArrayList<>();
        tlo.add(tl);
        Dbstudentinfo db = new Dbstudentinfo();
//        更新
        try {
            db.getDBcon();
            int result;

            result = db.selectTload(tl.getId());
            if (result == 1) {
//            idある
                db.updateTload(tl.getId(), tl.getPassword());
                db.updateload(tl);
                db.closeDBcon();
                if (!tlo.isEmpty()) {
                    DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                    tableModel.setRowCount(0);
                    for (TeachersLoad t : tlo) {
                        tableModel.addRow(new Object[]{t.getId(), t.getPassword(), t.getName(), t.getSex(), t.getKurasu(), t.getSubject()});
                        jLabel8.setText("更新しました");
                    }
                }
            } else {
                jLabel8.setText("ユーザーが存在しています");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Teacherload.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Teacherload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /*
    全員　検索
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        List<TeachersLoad> tlo = new ArrayList<>();
        Dbstudentinfo db = new Dbstudentinfo();
        try {
            db.getDBcon();
            tlo = db.selectAlltinfo();
            db.closeDBcon();
            jLabel8.setText("検索完了");
            if (!tlo.isEmpty()) {
                DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                tableModel.setRowCount(0);
                for (TeachersLoad t : tlo) {
                    tableModel.addRow(new Object[]{t.getId(), t.getPassword(), t.getName(), t.getSex(), t.getKurasu(), t.getSubject()});
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Teacherload.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Teacherload.class.getName()).log(Level.SEVERE, null, ex);
        }
//        if (!tlo.isEmpty()) {
//            DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
//            tableModel.setRowCount(0);
//            for (TeachersLoad t : tlo) {
//                tableModel.addRow(new Object[]{t.getId(), t.getPassword(), t.getName(), t.getSex(), t.getKurasu(), t.getSubject()});
//            }
//        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /*
    曖昧検索
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        TeachersLoad slo = new TeachersLoad();
        if (!jTextField3.getText().isEmpty()) {
            slo.setId(Integer.valueOf(jTextField3.getText()));
        }
        slo.setName(jTextField1.getText());
        slo.setKurasu((String) jComboBox1.getSelectedItem());
        Dbstudentinfo db = new Dbstudentinfo();
        List<TeachersLoad> sload = new ArrayList();
//id !null
        if (!jTextField3.getText().isEmpty()) {
            if (slo.getName().isEmpty()) {
                try {
                    //            根据ID从数据库匹配
                    db.getDBcon();
                    sload = db.liketinfoid(slo.getId());
                    if (sload.isEmpty()) {
                        jLabel8.setText("検索IDなし");
                    } else {
                        db.closeDBcon();
                        jLabel8.setText("検索完了");
//                     if (!sload.isEmpty()) {
                        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                        tableModel.setRowCount(0);
                        for (TeachersLoad t : sload) {
                            tableModel.addRow(new Object[]{t.getId(), t.getPassword(), t.getName(), t.getSex(), t.getKurasu(), t.getSubject()});
                        }
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Tstudentinfo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Tstudentinfo.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    //                根据取到的ID和name去数据库匹配
                    db.getDBcon();
                    sload = db.liketinfo(slo.getId(), slo.getName());
                    if (sload.isEmpty()) {
                        jLabel8.setText("検索エラー");
                    } else {
                        db.closeDBcon();
                        jLabel8.setText("検索完了");
//                      if (!sload.isEmpty()) {
                        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                        tableModel.setRowCount(0);
                        for (TeachersLoad t : sload) {
                            tableModel.addRow(new Object[]{t.getId(), t.getPassword(), t.getName(), t.getSex(), t.getKurasu(), t.getSubject()});
                        }
//            }
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Tstudentinfo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Tstudentinfo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
//           id null
        } else if (jTextField3.getText().isEmpty()) {
//            name !null
            if (!slo.getName().isEmpty()) {
                try {
                    //              根绝name从数据库
                    db.getDBcon();
                    sload = db.liketinfo(slo.getName());
                    if (sload.isEmpty()) {
                        jLabel8.setText("検索nameなし");
                    } else {
                        db.closeDBcon();
                        jLabel8.setText("検索完了");
//                      if (!sload.isEmpty()) {
                        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                        tableModel.setRowCount(0);
                        for (TeachersLoad t : sload) {
                            tableModel.addRow(new Object[]{t.getId(), t.getPassword(), t.getName(), t.getSex(), t.getKurasu(), t.getSubject()});
                        }
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Tstudentinfo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Tstudentinfo.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    //                根据class从数据库
                    db.getDBcon();
                    sload = db.selectkurasu(slo.getKurasu());
                    db.closeDBcon();
                    jLabel8.setText("検索完了");
                    if (!sload.isEmpty()) {
                        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
                        tableModel.setRowCount(0);
                        for (TeachersLoad t : sload) {
                            tableModel.addRow(new Object[]{t.getId(), t.getPassword(), t.getName(), t.getSex(), t.getKurasu(), t.getSubject()});
                        }
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Tstudentinfo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Tstudentinfo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Teacherload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Teacherload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Teacherload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Teacherload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Teacherload().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
